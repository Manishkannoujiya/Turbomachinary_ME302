import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import fsolve

# Constants
GAMMA = 1.4
R = 287  # J/kg·K
MU = 1.83e-5  # Pa·s
T01 = 293  # K
P_REF = 101325  # Pa
T_REF = 293  # K
P_MAX = 250e3  # Pa (maximum allowable pressure)

# Given parameters
L_prototype = 0.2  # m
M_target = 0.55
Re_target = 3.0e6

# Compressor data from Excel (replace with your actual data loading)
data = {
    'mdot_ref': [10.55028375, 10.54743366, 10.5265642, 10.54056709, 10.53225492,
                10.52059919, 10.51250485, 10.50355709, 10.49797497, 10.51550705,
                10.5020042, 10.49191763, 10.47588418, 10.48375557, 10.47836222,
                10.47843951, 10.46355384, 10.45631264, 10.44488778, 10.4581924,
                10.45107807, 10.42238805, 10.44162267, 10.43130054, 10.41036495,
                10.41905258, 10.43188241, 10.42140115, 10.41561707, 10.40954302,
                10.41479564, 10.40199814, 10.39376047, 10.38489335, 10.37631332,
                10.38621781, 10.3856431, 10.37966179, 10.3795998, 10.36727402,
                10.35801514, 10.36003768, 10.36234453, 10.34463492, 10.34081779,
                10.33777757, 10.32242223, 10.30721935, 10.30057968, 10.29763034,
                10.29088943, 10.28937082, 10.28094733, 10.28656233, 10.26804526,
                10.26534365, 10.25545969, 10.26546034, 10.24861681, 10.23843373,
                10.24156118, 10.2439604, 10.22443436, 10.21289479, 10.21858794,
                10.1995637, 10.18042293, 10.17837449, 10.17359894, 10.16195516,
                10.1579187, 10.13634191, 10.1392643, 10.15589092, 10.14100601,
                10.11729257, 10.10949919, 10.10855669, 10.10723309, 10.09719444,
                10.09713307, 10.07663076, 10.07281606, 10.07444751, 10.05856203,
                10.04926102, 10.02400929, 10.03068154, 10.03775193, 9.997488823,
                9.986864652, 9.988169639, 9.974162477, 9.942390092, 9.947825875,
                9.91905215, 9.890516002, 9.884940031, 9.856511291, 9.869430473,
                9.84480217, 9.829892571, 9.809052116, 9.791287644, 9.779826995,
                9.755803003, 9.751295115, 9.738988889, 9.709396421, 9.681966217,
                9.674874285, 9.656636461, 9.634181128, 9.61882918, 9.608418947,
                9.574656125, 9.543653225, 9.545461855, 9.526905075, 9.492349414,
                9.476704877, 9.468499817, 9.438085904, 9.410395443, 9.374503718,
                9.383322237, 9.35478089, 9.32391436, 9.275782871, 9.259602943,
                9.213002018, 9.166633804, 9.144796745, 9.117519014, 9.080686437,
                9.038655467, 9.005166855, 8.975223927],
    'T0_ratio': [1.068519008, 1.068558297, 1.068532365, 1.068554906, 1.068622414,
                1.068581486, 1.069039723, 1.068895068, 1.069024843, 1.069037532,
                1.068825929, 1.068991295, 1.069153845, 1.069077999, 1.06940264,
                1.069170139, 1.069240913, 1.069352273, 1.069514785, 1.069507082,
                1.069772398, 1.069631958, 1.069759795, 1.069642001, 1.069546943,
                1.069731474, 1.06982674, 1.069695558, 1.06980027, 1.069714745,
                1.069870401, 1.069901752, 1.070073543, 1.070003003, 1.070302084,
                1.070075458, 1.070160479, 1.070205704, 1.070259677, 1.070389651,
                1.070595211, 1.070389187, 1.070684158, 1.070542904, 1.070838508,
                1.070802339, 1.071104483, 1.070970429, 1.071287176, 1.070866757,
                1.071108481, 1.071132875, 1.071307976, 1.071330934, 1.071503655,
                1.071144534, 1.071379454, 1.071193331, 1.071485793, 1.071575575,
                1.071768769, 1.071572714, 1.071768653, 1.07147892, 1.071906126,
                1.071969246, 1.072121743, 1.072139729, 1.072244073, 1.072026913,
                1.07233319, 1.072199367, 1.072562753, 1.072501274, 1.072587269,
                1.072560921, 1.072749231, 1.072492242, 1.072898883, 1.072928002,
                1.072938466, 1.073044411, 1.073206291, 1.073107766, 1.073554241,
                1.073373617, 1.073547083, 1.073581095, 1.073632424, 1.073588438,
                1.073934683, 1.073975012, 1.074359173, 1.074421726, 1.074332933,
                1.074578527, 1.074695066, 1.074953347, 1.075272065, 1.075321084,
                1.075415483, 1.07562671, 1.075613106, 1.075742135, 1.076191401,
                1.076242722, 1.076408297, 1.076583685, 1.076675584, 1.07687154,
                1.077018687, 1.077137267, 1.077538419, 1.077592225, 1.077712253,
                1.077932282, 1.077910536, 1.078375867, 1.07865904, 1.078821246,
                1.078938896, 1.079278922, 1.079126606, 1.079554969, 1.079594395,
                1.07975961, 1.079971512, 1.080041617, 1.080158231, 1.080635153,
                1.080742081, 1.081283176, 1.081408091, 1.08155984, 1.081562695,
                1.082079432, 1.082022913, 1.082596762],
    'P0_ratio': [1.210453952, 1.210681035, 1.21072001, 1.210876663, 1.212341445,
                1.212024862, 1.212637371, 1.212775584, 1.213608952, 1.213124031,
                1.21371333, 1.215095944, 1.214521887, 1.214323669, 1.215370932,
                1.215273449, 1.215438604, 1.216327636, 1.217111619, 1.216397739,
                1.216061295, 1.21725439, 1.216750242, 1.21722572, 1.217441396,
                1.217772552, 1.217618515, 1.217548062, 1.217795828, 1.218672365,
                1.218892428, 1.218963086, 1.218982928, 1.219742594, 1.219809639,
                1.219734299, 1.219589556, 1.220560697, 1.220589943, 1.220545569,
                1.2208532, 1.221309942, 1.222045786, 1.221899411, 1.222466889,
                1.223218656, 1.2232485, 1.223519391, 1.223854017, 1.225244942,
                1.224870305, 1.224431367, 1.225223994, 1.225774075, 1.226231838,
                1.226294444, 1.226293459, 1.226722245, 1.227343899, 1.226799022,
                1.227771443, 1.228398835, 1.227964669, 1.228105916, 1.22844747,
                1.22921517, 1.230155775, 1.229685804, 1.230414687, 1.230722546,
                1.231194705, 1.232029008, 1.232302894, 1.231940554, 1.232345038,
                1.233079158, 1.233033902, 1.233279479, 1.233425974, 1.234413852,
                1.234700484, 1.235268302, 1.235723322, 1.235612513, 1.235908234,
                1.236624949, 1.237380483, 1.23704784, 1.238095793, 1.238566539,
                1.239120141, 1.240304153, 1.239680714, 1.24058771, 1.241213252,
                1.242420592, 1.243146436, 1.243721271, 1.244579902, 1.245143399,
                1.24560239, 1.246736544, 1.247662508, 1.248638025, 1.248395826,
                1.24961661, 1.249696444, 1.250497803, 1.250876118, 1.251921626,
                1.253064724, 1.253220016, 1.254016221, 1.254718376, 1.25560333,
                1.256443952, 1.256423085, 1.256957286, 1.258442704, 1.260175879,
                1.259922081, 1.260785346, 1.2616592, 1.262135987, 1.262933291,
                1.263832466, 1.264258821, 1.265471673, 1.266464155, 1.266693581,
                1.268200167, 1.269157695, 1.269156549, 1.271191251, 1.271223198,
                1.272217903, 1.273317281, 1.273895308]
}

df = pd.DataFrame(data)
df = df.sort_values('mdot_ref')  # Sort by mass flow rate

def calculate_scale_factor(P01, mdot_ref, P0_ratio):
    """Calculate scale factor that matches Reynolds number"""
    # Calculate actual mass flow rate
    mdot = mdot_ref * (P01/P_REF) * np.sqrt(T_REF/T01)
    
    # Function to solve for scale factor s
    def equation(s):
        L_model = s * L_prototype
        D4 = 2 * L_model
        A4 = np.pi * (D4)**2 / 4
        
        # Flow conditions at station 4 (assuming isentropic)
        T4 = T01 / (1 + (GAMMA-1)/2 * M_target**2)
        a4 = np.sqrt(GAMMA * R * T4)
        C4 = M_target * a4
        rho4 = (mdot/A4) / C4
        
        Re = rho4 * C4 * L_model / MU
        return Re - Re_target
    
    # Solve for scale factor
    s = fsolve(equation, 0.5)[0]
    return s

# Find valid operating points (p05 >= p01 => P0_ratio >= 1/0.93575)
min_P0_ratio = 1/0.93575
valid_idx = df['P0_ratio'] >= min_P0_ratio
df_valid = df[valid_idx]

# Find maximum P01 that satisfies p02 <= P_MAX
P0_ratio_max = df_valid['P0_ratio'].iloc[-1]  # Highest P0_ratio in valid range
P01_max = P_MAX / P0_ratio_max

# Get operating point parameters
mdot_ref_op = df_valid['mdot_ref'].iloc[-1]
P0_ratio_op = df_valid['P0_ratio'].iloc[-1]
T0_ratio_op = df_valid['T0_ratio'].iloc[-1]

# Calculate scale factor
scale_factor = calculate_scale_factor(P01_max, mdot_ref_op, P0_ratio_op)

# Calculate model dimensions
L_model = scale_factor * L_prototype
D4 = 2 * L_model

# Print results
print("=== Results for Part (a) ===")
print(f"Maximum scale factor: {scale_factor:.4f}")
print(f"Inlet stagnation pressure (P01): {P01_max/1000:.2f} kPa")
print(f"Compressor operating point:")
print(f"  - mdot_ref: {mdot_ref_op:.4f} kg/s")
print(f"  - P0 ratio: {P0_ratio_op:.4f}")
print(f"  - T0 ratio: {T0_ratio_op:.4f}")
print(f"\nModel dimensions:")
print(f"  - Model length: {L_model*100:.2f} cm")
print(f"  - Test section diameter (D4): {D4*100:.2f} cm")

# Plot compressor map
plt.figure(figsize=(10, 6))
plt.plot(df['mdot_ref'], df['P0_ratio'], 'b-', linewidth=2, label='Compressor Characteristic')
plt.plot(mdot_ref_op, P0_ratio_op, 'ro', markersize=8, label=f'Operating Point (s={scale_factor:.3f})')
plt.axhline(y=min_P0_ratio, color='g', linestyle='--', label='Minimum P0 ratio (1.0687)')
plt.axhline(y=P_MAX/P01_max, color='r', linestyle=':', label='Max Pressure Constraint')

plt.title('Compressor Operation Map', fontsize=14)
plt.xlabel('Reference Mass Flow Rate (kg/s)', fontsize=12)
plt.ylabel('Pressure Ratio (P02/P01)', fontsize=12)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig('compressor_map.png', dpi=300)
plt.show()